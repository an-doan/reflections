1. What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, you create a a repository inside the folder you are currently
in. This means there is a .git folder inside you folder and you can now keep track of the 
history of the files inside your folder. You need to do this so that you can track changes in
your files. 

2. How is the staging area different from the working directory and the repository? What value
do you think it offers?

The staging area is different from the working directory and the repository because it decides
which files will be commited. The working directory has all the files and contains the repository,
and the repository contains the commits. With the staging area, you can choose which files to commit, 
so that is what it offers.

3.How can you use the staging area to make sure you have one commit per logical change?

You can only add one logical change to your staging area and commit that change before committing
more changes. For example if you changed two files that you want to seperate into two different
commits, you can add one file to the staging area and commit that one before committing the other file.

4. What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

Branches are helpful when you want to create a different version of the app but you want to
keep the old version as well, or if you wanted to experiment with the app, but you don't want
your old version to be destroyed if something goes wrong. Branches help because they allow you 
to have two versions of your app that you can easily go back to by using git checkout.

5. How do the diagrams help you visualize the branch structure?

Diagrams help you visualize the branch structure because they allow you to see which branches
are parents of which and which commits can or cannot be reached in that branch.